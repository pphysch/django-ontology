# Generated by Django 4.0.5 on 2022-06-10 20:40

import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('ontology', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Policy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.SlugField()),
                ('disabled', models.BooleanField(default=False, help_text='When this policy is disabled, it will not be considered when checking permissions.')),
                ('allow_permissions', models.ManyToManyField(related_name='policies', to='auth.permission')),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='policies', to='ontology.domain')),
                ('source_attrs', models.ManyToManyField(help_text='Objects must have all attributes to be included in this policy.', related_name='policies_as_source', to='ontology.attribute')),
                ('target_attrs', models.ManyToManyField(help_text='Objects must have all attributes to be included in this policy.', related_name='policies_as_target', to='ontology.attribute')),
            ],
            options={
                'verbose_name_plural': 'policies',
            },
        ),
        migrations.CreateModel(
            name='Entitlement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='entitlements', to='auth.permission')),
                ('policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entitlements', to='ontology_auth.policy')),
                ('source', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='entitlements_as_source', to='ontology.entity')),
                ('target', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='entitlements_as_target', to='ontology.entity')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('entity', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='ontology.entity')),
                ('deleted', models.BooleanField(db_index=True, default=False, editable=False, help_text="True indicates the component has been soft-deleted and won't appear in most queries.")),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='policy',
            constraint=models.UniqueConstraint(fields=('label', 'domain'), name='ontology_auth_policy_unique'),
        ),
        migrations.AddIndex(
            model_name='entitlement',
            index=models.Index(fields=['source', 'permission', 'target'], name='ontology_au_source__db249c_idx'),
        ),
        migrations.AddConstraint(
            model_name='entitlement',
            constraint=models.UniqueConstraint(fields=('source', 'permission', 'target', 'policy'), name='ontology_auth_entitlement_unique'),
        ),
    ]
